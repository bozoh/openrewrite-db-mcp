name: CI

on:
  push:
    branches: [develop, master]
  pull_request:
    branches: [develop, master]

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup uv and Python
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies (dev)
        run: uv sync --dev

      - name: Run tests
        run: uv run pytest -q

  publish:
    name: Publish to PyPI (on master with version bump)
    if: github.ref == 'refs/heads/master'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup uv and Python
        uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.12"

      - name: Check version bump vs PyPI
        id: check
        shell: bash
        run: |
          set -euo pipefail

          PYPROJECT_VERSION=$(python - << 'PY'
          import tomllib
          with open("pyproject.toml","rb") as f:
              data = tomllib.load(f)
          print(data["project"]["version"])
          PY
          )
          echo "version=$PYPROJECT_VERSION" >> "$GITHUB_OUTPUT"

          PROJECT_NAME=$(python - << 'PY'
          import tomllib
          with open("pyproject.toml","rb") as f:
              data = tomllib.load(f)
          print(data["project"]["name"])
          PY
          )
          echo "name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"

          # Descobre última versão no PyPI (se existir)
          set +e
          RESP=$(curl -sSfL "https://pypi.org/pypi/${PROJECT_NAME}/json")
          STATUS=$?
          set -e
          if [ $STATUS -ne 0 ]; then
            echo "pypi_exists=false" >> "$GITHUB_OUTPUT"
            echo "should_publish=true" >> "$GITHUB_OUTPUT"
            echo "Pacote ainda não existe no PyPI; será publicado."
          else
            LATEST=$(printf "%s" "$RESP" | python - << 'PY'
import sys, json
data=json.load(sys.stdin)
print(data["info"]["version"])
PY
)
            echo "pypi_exists=true" >> "$GITHUB_OUTPUT"
            echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
            if [ "$LATEST" != "$PYPROJECT_VERSION" ]; then
              echo "should_publish=true" >> "$GITHUB_OUTPUT"
              echo "Versão mudou ($LATEST -> $PYPROJECT_VERSION); será publicado."
            else
              echo "should_publish=false" >> "$GITHUB_OUTPUT"
              echo "Versão não mudou ($LATEST); publicação será pulada."
            fi
          fi

      - name: Build distribution
        if: steps.check.outputs.should_publish == 'true'
        run: uv build

      - name: Publish to PyPI
        if: steps.check.outputs.should_publish == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist

      - name: Skip publish (no version change)
        if: steps.check.outputs.should_publish != 'true'
        run: echo "Skipping publish: version not changed vs PyPI"
